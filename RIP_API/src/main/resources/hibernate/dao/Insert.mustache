baseSession.beginTransaction();
    {{entity}} entity = null;
    try{

    Session session = baseSession.getSession();
    {{#ForeignKeyFields}}
    {{#FKCompositeId}}
    {{foreignKeyEntity}}Id {{fKVariable}}Id = new {{foreignKeyEntity}}Id({{#Parameters}}{{name}}{{delimiter}} {{/Parameters}});
    {{/FKCompositeId}}
    {{foreignKeyEntity}} {{fKVariable}} = ({{foreignKeyEntity}})session.get({{foreignKeyEntity}}.class , {{fKId}});
    {{/ForeignKeyFields}}
    {{#CompositeId}}
    {{compositeEntityId}} id = new {{compositeEntityId}}({{#Parameters}}{{name}}{{delimiter}} {{/Parameters}});
    {{/CompositeId}}
    entity = new {{entity}}();
    {{#CompositeId}}
        entity.{{cKFieldSetter}}(id);
    {{/CompositeId}}
    {{#ForeignKeyFields}}
        entity.{{fKFieldSetter}}({{fKVariable}});
    {{/ForeignKeyFields}}
    {{#EntityFields}}
        entity.{{entityFieldSetter}}({{dtoName}}.{{dtoFieldGetter}}());
    {{/EntityFields}}

    session.save(entity);
    session.flush();

    baseSession.endTransaction();

    }catch(RuntimeException re){
    LOGGER.error(re.getMessage(), re);
    baseSession.rollbackTransaction();
    } /*finally {
    if (baseSession != null) {
    LOGGER.error("Transaction rollbacked");
    baseSession.rollbackTransaction();
    }
    }*/

    return {{returnType}};
